@page "/"
@inject NumberService NumberService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navman
@inject UserNameService service
@using GamePortal.Models
@using GamePortal.Components
@using GamePortal.Services
@using Microsoft.AspNetCore.Components.Forms


<h1>Hello, world!</h1>
@if (username is not null)
{
    
    <CascadingValue Value="username" Name="UserName" >
        <NumberComponent />
        <button @onclick="StartGame">Start Game</button>
    </CascadingValue>
}
else
{
    <EditForm Model="User" OnSubmit="SetName">
        <ValidationSummary />

        <div class="form-group">
            <label for="name">My Name:</label>
            <InputText id="name" @bind-Value="User.Name" class="form-control" />
            <ValidationMessage For="@(() => User.Name)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}


@code {
    public User User { get; set; } = new();
    private Random rand = new Random();

    private string? username;

    protected override Task OnInitializedAsync()
    {
        NumberService.OnNewNumber += () =>
        {
            // do something with the messenger.Text here
            InvokeAsync(this.StateHasChanged);
        };

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        username = await sessionStorage.GetItemAsync<string>("username");
    }

    public void AddNewNumber()
    {
        NumberService.AddNumber(rand.Next(int.MaxValue));
    }

    private async Task SetName()
    {
        await sessionStorage.SetItemAsync("username", User.Name);
        username = User.Name;
        service.UpdateName?.Invoke(username);
    }

    private void StartGame()
    {
        navman.NavigateTo("/game/" + "kjhohoiuh890sdfsd-sdf");
    }
}
