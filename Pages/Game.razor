@page "/game/{id}"
@inject NavigationManager navman
@inject IJSRuntime JSRuntime
@inject IMemoryCache cache
@inject GameService GameService
@implements IAsyncDisposable
@using GamePortal.Helpers
@using GamePortal.Services
@using GamePortal.Models
@using GamePortal.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Caching.Memory

<div style="display: flex; flex-direction: column; align-items: center;">
    <h3>@game.GetType().Name game</h3>
    @if (game.IsStarted())
    {
        <button class="btn btn-primary" @onclick="@(() => @navman.NavigateTo(""))">Home</button>
        <TicTacToeGame Game="game" />
    }
    else
    {
        <h3>@UserName</h3>
        <text>Waiting other player...</text>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; } = null!;

    [CascadingParameter(Name = "UserName")]
    public string UserName { get; set; } = null!;

    private IGame game = null!;

    private CancellationTokenSource cts;

    protected async override Task OnInitializedAsync()
    {
        game = GameService.GetGame<TicTacToe>(Id)!;
        cts = new CancellationTokenSource();
        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            if (!game.IsStarted())
            {
                _ = TaskRunner.RunInBackground(TimeSpan.FromSeconds(1), () => cache.Set(UserId, DateTime.UtcNow), cts.Token);
            }
            if (!game.IsStarted())
            {
                game.AddPlayer(UserId, UserName);
            }
            StateHasChanged();
        }

        game.OnChange += () =>
        {
            InvokeAsync(StateHasChanged);
        };

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (string.IsNullOrEmpty(UserName))
        {
            navman.NavigateTo($"/login?ReturnUrl=game/{Id}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (cts is not null)
        {
            cts.Cancel();
        }
    }
}
